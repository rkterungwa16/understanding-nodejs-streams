What are Streams?

  They are a way to handle reading/writing files,
  network communications, or any kind of end-to-end information exchange in an efficient way.

  In the traditional way, when you tell the program to read a file,
  the file is read into memory, from start to finish, and then you process it.

  Using streams you read it piece by piece, processing its content without keeping it all in memory.

Why use streams?

  Memory efficiency: you donâ€™t need to load large amounts of data in memory before you are able to process it

  Time efficiency: it takes way less time to start processing data as soon as you have it,
  rather than waiting till the whole data payload is available to start

  Composability: pipe() method enables more cleaner, modular code that is reusable.

    It does this by allowing us to connect to different processing units, each being responsible for one single
    responsibility

Stream powered Nodejs apis

  process.stdin returns a stream connected to stdin
  process.stdout returns a stream connected to stdout
  process.stderr returns a stream connected to stderr
  fs.createReadStream() creates a readable stream to a file
  fs.createWriteStream() creates a writable stream to a file
  http.request() returns an instance of the http.ClientRequest class, which is a writable stream
  zlib.createGzip() compress data using gzip (a compression algorithm) into a stream
  zlib.createGunzip() decompress a gzip stream.
  zlib.createDeflate() compress data using deflate (a compression algorithm) into a stream
  zlib.createInflate() decompress a deflate stream

Every stream in Node.js is an implementation of one of the
base abstract classes available in the stream core module

  stream.Readable
  stream.Writable
  stream.Duplex
  stream.Transform

Each stream is an instance of EventEmitter.

Streams can produce several types of events, such as
  'end' when a Readable stream has finished reading
  'error' when something goes wrong

Streams are flexible because they can handle almost any
JavaScript value including binary data

  Binary mode: This mode is where data is streamed in the
  form of chunks, such as buffers or strings

  Object mode: This mode is where the streaming data is
  treated as a sequence of discrete objects (allowing
  us to use almost any JavaScript value)

The above two operating modes allow us to use streams not
only for I/O, but also as a tool to elegantly compose
processing units.

Different Types of Streams

  Readable: a stream you can pipe from, but not pipe into.
    You can recieve data, but not send data to it

    When you push data into a readable stream, it is buffered,
    until a consumer starts to read the data

  Writable: a stream you can pipe into, but not pipe from.
    You can send data, but cannot recieve from it

  Duplex: a stream you can both pipe into and pipe from.

  Transform: similar to Duplex.
    The output is a transform of its input

